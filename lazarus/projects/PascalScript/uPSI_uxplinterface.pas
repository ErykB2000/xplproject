unit uPSI_uxplinterface;
{
This file has been generated by UnitParser v0.7, written by M. Knight
and updated by NP. v/d Spek and George Birbilis. 
Source Code from Carlo Kok has been used to implement various sections of
UnitParser. Components of ROPS are used in the construction of UnitParser,
code implementing the class wrapper is taken from Carlo Kok's conv utility

}
interface
 
uses
   SysUtils
  ,Classes
  ,uPSComponent
  ,uPSRuntime
  ,uPSCompiler
  ;
 
type 
(*----------------------------------------------------------------------------*)
  TPSImport_uxplinterface = class(TPSPlugin)
  protected
    procedure CompileImport1(CompExec: TPSScript); override;
    procedure ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter); override;
  end;
 
 
{ compile-time registration functions }
procedure SIRegister_TxPLInterface(CL: TPSPascalCompiler);
procedure SIRegister_uxplinterface(CL: TPSPascalCompiler);

{ run-time registration functions }
procedure RIRegister_TxPLInterface(CL: TPSRuntimeClassImporter);
procedure RIRegister_uxplinterface(CL: TPSRuntimeClassImporter);

procedure Register;

implementation


uses
  uxPLMsgHeader
  ,uxplinterface
  ;
 
 
procedure Register;
begin
  RegisterComponents('Pascal Script', [TPSImport_uxplinterface]);
end;

(* === compile-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure SIRegister_TxPLInterface(CL: TPSPascalCompiler);
begin
  //with RegClassS(CL,'TxPLListener', 'TxPLInterface') do
  with CL.AddClassN(CL.FindClass('TxPLListener'),'TxPLInterface') do
  begin
    RegisterMethod('Procedure SendMsg( aMsgType : TxPLMessageType; aTarget, aSchema, aBody : string)');
    RegisterMethod('function  Exists(aString : string; bDelete : boolean) : boolean;');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure SIRegister_uxplinterface(CL: TPSPascalCompiler);
begin
  SIRegister_TxPLInterface(CL);
end;

(* === run-time registration functions === *)
(*----------------------------------------------------------------------------*)
procedure RIRegister_TxPLInterface(CL: TPSRuntimeClassImporter);
begin
  with CL.Add(TxPLInterface) do
  begin
    RegisterMethod(@TxPLInterface.SendMsg, 'SendMsg');
	RegisterMethod(@TxPLInterface.Exists, 'Exists');
  end;
end;

(*----------------------------------------------------------------------------*)
procedure RIRegister_uxplinterface(CL: TPSRuntimeClassImporter);
begin
  RIRegister_TxPLInterface(CL);
end;

 
 
{ TPSImport_uxplinterface }
(*----------------------------------------------------------------------------*)
procedure TPSImport_uxplinterface.CompileImport1(CompExec: TPSScript);
begin
  SIRegister_uxplinterface(CompExec.Comp);
end;
(*----------------------------------------------------------------------------*)
procedure TPSImport_uxplinterface.ExecImport1(CompExec: TPSScript; const ri: TPSRuntimeClassImporter);
begin
  RIRegister_uxplinterface(ri);
end;
(*----------------------------------------------------------------------------*)
 
 
end.
